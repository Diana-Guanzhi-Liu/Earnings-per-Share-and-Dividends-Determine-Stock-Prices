---
title: "My title"
subtitle: "My subtitle if needed"
author: 
  - First author
  - Another author
thanks: "Code and data are available at: LINK."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
toc: true
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(arrow)
library(modelsummary)
library(bayesplot)
library(broom)
library(gridExtra)
library(rstanarm)
library(knitr)
#
library(gt)
```


# Introduction

You can and should cross-reference sections and sub-sections. 

The remainder of this paper is structured as follows. @sec-data....



# Data
Public companies whose stock are traded on exchanges, must disclose certain financial metrics in their quarterly and yearly financial statements. Investors then use these metrics to help inform their decision when selecting companies to invest in. Some of the most important metrics investors look at are Earnings Per Share, Net Income, and Dividends [@CiteShakespeare]. Investments take the form of buying shares or stocks which allows the investor to own a fraction of the company.

The data used for analysis is obtained through Walton Research Data Services (WRDS) by the University of Pennsylvania. WRDS provides access to Compustat, a database of financial, statistical, and market information on global companies since 1962. Our data comes from Compustat's North America Fundamentals Annual database, which contains both financial data from all public North American companies, collected by Compustat from each company's annual financial statements or from stock exchanges (@fig-Analysis-Data-Sample). This Data is cleaned and analysed in @CiteR with assistance from @CiteTidy, @CiteArrow, @CiteModelsummary, @CiteBayesplot, @CiteBroom, @CiteGridextra, @CiteRstanarm, and @CiteKnitr.

```{r}
#| label: fig-Analysis-Data-Sample
#| fig-cap: Data from Compustat North America Fundamentals Annual. EPS, Dividends, and Net Income are financial statement data while Price are stock exchange data, and Year and Tic can be found on both.
#| echo: false

analysis_data <- read_parquet(here::here("outputs/data/analysis_data.parquet"))
kable(head(analysis_data))
```

## Financial Statement Data
Earnings per share, net income, and dividends are items that are found on financial statements. Specifically, EPS and net income can be found on the income statement while dividends can be found on the statement of retained earnings. This data is likely unbiased and free from error as financial statements are required by law to be audited (verified by an independent third party).

EPS is a commonly used measure of a given company's value in USD; it is calculated as net income divided by the number of shares of stock. A higher EPS indicates greater value as investors are willing to pay more for a company's shares if they think the company has higher profits relative to its share price [@CiteShakespeare]. We expect earnings to be positively correlated with stock price.

Net income is used to measure profitability in USD or how much income the company gets to keep after expenses are paid for. Higher net income means that the company is profitable by either earning more revenues or reducing expenses. Net income is expected to be positively correlated with price as investors want to invest in companies that are more profitable.

## Stock Exchange Data
The price is the amount that each share costs to buy, it is determined by supply and demand for a company. For example, if investors believe a company is profitable, they will buy shares with the goal of eventually sharing in said profit, increasing demand and driving up share price.



```{r}
#| label: fig-distributions
#| fig-cap: Bills of penguins
#| echo: false
#| warning: false
#| message: false

distribution_price <-
  ggplot(analysis_data, aes(x = Price)) +
  geom_histogram() +
  theme_minimal()

distribution_EPS <-
  ggplot(analysis_data, aes(x = EPS)) +
  geom_histogram() +
  theme_minimal()

distribution_Dividends <-
  ggplot(analysis_data, aes(x = Dividends)) +
  geom_histogram() +
  theme_minimal()

distribution_Net_Income <-
  ggplot(analysis_data, aes(x = Net_Income)) +
  geom_histogram() +
  theme_minimal()

grid.arrange(distribution_EPS, distribution_Net_Income, distribution_Dividends, ncol = 3)
```

Talk more about it.

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)

```{r}
#| echo: false
#| eval: true
#| label: tbl-summary-statistics
#| tbl-cap: " "
#| warning: false

earnings_per_share <- unclass(summary(analysis_data$EPS, digits = 3))
net_income <- unclass(summary(analysis_data$Net_Income, digits = 7))
dividends <- unclass(summary(analysis_data$Dividends, digits = 6))
price <- unclass(summary(analysis_data$Price, digits = 5))
summary <- data.frame(earnings_per_share, net_income, dividends, price, check.names = FALSE, stringsAsFactors = FALSE)

summary_stats <- c("Min", "1st Quartile", "Median", "Mean", "3rd Quartile", "Max")
summary <-
  cols_add(gt(summary), summary_stats) |>
  cols_move_to_start(summary_stats)

tab_footnote(summary, "Note: ")
```


```{r}
#| label: tbl
#| fig-cap: Relationship between me and ur mom
#| echo: false
#| warning: false
#| message: false

base_net_income_plot <-
  analysis_data |> 
  ggplot(aes(x = Net_Income, y = Price)) +
  geom_point(alpha = 0.5) +
  theme_minimal() +
  labs(x = "Net Income",
       y = "Stock Price")

base_dvidends_plot <-
  analysis_data |> 
  ggplot(aes(x = Dividends, y = Price)) +
  geom_point(alpha = 0.5) +
  theme_minimal() +
  labs(x = "Dividends",
       y = "Stock Price")

base_eps_plot <-
  analysis_data |> 
  ggplot(aes(x = EPS, y = Price)) +
  geom_point(alpha = 0.5) +
  theme_minimal() +
  labs(x = "EPS",
       y = "Stock Price")

best_fit_net_income <-
  base_net_income_plot +
  geom_smooth(
    method = "lm",
    se = TRUE,
    color = "black",
    linetype = "dashed",
    formula = "y ~ x"
  )

best_fit_dividends <-
  base_dvidends_plot +
  geom_smooth(
    method = "lm",
    se = TRUE,
    color = "black",
    linetype = "dashed",
    formula = "y ~ x"
  )

best_fit_eps <-
  base_eps_plot +
  geom_smooth(
    method = "lm",
    se = TRUE,
    color = "black",
    linetype = "dashed",
    formula = "y ~ x"
  )

grid.arrange(best_fit_net_income, best_fit_dividends, best_fit_eps, ncol = 2, nrow = 2)

```



Talk way more about it. 



# Model

The goal of our modelling strategy is twofold. Firstly,...

Here we briefly describe the Bayesian analysis model used to investigate... Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

Simple Model
\begin{align} 
y &= \beta_0 + \beta_1X + \epsilon \\
Y &\sim \mbox{Normal}(\beta, \sigma^2)
\end{align}
Where Y is the stock price and X is earnings per share.

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.

Multivariable Model
\begin{align} 
y &= \beta_0 + \beta_1X_1 + \beta_2X_2 - \beta_3X_3 + \epsilon \\
Y &\sim \mbox{Normal}(\beta, \sigma^2)
\end{align}
Where X1 is EPS, X2 is net income, and X3 is dividends.

### Model justification
We expect a positive relationship between the size of the wings and time spent aloft. In particular...

We can use maths by including latex between dollar signs, for instance $\theta$.


# Results

Our results are summarized in @tbl-modelresults.



```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

first_model <-
  lm(
    Price ~ EPS,
    data = analysis_data
  )

modelsummary(list("Net_Income" = first_model))
```

```{r}
#| echo: false
#| eval: true
#| label: tbl-poopy but hole
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

analysis_data <-
  augment(
    first_model,
    data = analysis_data
  )

distribution_residuals <-
  ggplot(analysis_data, aes(x = .resid)) +
  geom_histogram(binwidth = 1) +
  theme_classic() +
  labs(y = "Number of occurrences", x = "Residuals")

residuals_eps <-
  ggplot(analysis_data, aes(x = EPS, y = .resid)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dotted", color = "grey") +
  theme_classic() +
  labs(y = "Residuals", x = "Earnings Per Share")

residuals_price <-
  ggplot(analysis_data, aes(x = Price, y = .resid)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dotted", color = "grey") +
  theme_classic() +
  labs(y = "Residuals", x = "Stock Price")

estimated_vs_actual <-
  ggplot(analysis_data, aes(x = Price, y = .fitted)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  theme_classic() +
  labs(y = "Estimated Stock Price", x = "Actual Stock Price")

grid.arrange(distribution_residuals, residuals_eps, residuals_price, estimated_vs_actual, nrow = 2)

```

```{r}
#| echo: false
#| eval: true
#| label: tbl-
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

  ggplot(analysis_data,aes(y=Price,x=EPS,color=Net_Income)) +
  geom_point() +
  stat_smooth(method="lm",se=FALSE)+
  theme_classic() 

```


```{r}
#| echo: false
#| eval: true
#| label: tbl-uuhhhh
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

multi_model <-
  lm(
    Price ~ EPS + Net_Income,
    data = analysis_data
  )

modelsummary(
  list(
    "EPS Only" = first_model,
    "With Net Income" = multi_model
  ),
  fmt = 2
)
```

```{r}
#| include: false
#| eval: true
#| warning: false
model_rstanarm_1 <-
  stan_glm(
    formula = Price ~ EPS + Net_Income,
    data = analysis_data,
    family = gaussian(),
    prior = normal(location = 0, scale = 2.5),
    prior_intercept = normal(location = 0, scale = 2.5),
    prior_aux = exponential(rate = 1),
    seed = 345
  )

saveRDS(
  model_rstanarm_1,
  file = "model_rstanarm_1.rds"
)
```


```{r}
#| include: false
#| eval: true
#| warning: false

model_rstanarm_1 <-
  readRDS(file = "model_rstanarm.rds")
prior_summary(model_rstanarm_1)
```

```{r}
#| include: false
#| eval: true
#| warning: false
model_rstanarm_2 <-
  stan_glm(
    formula = Price ~ EPS + Net_Income,
    data = analysis_data,
    family = gaussian(),
    prior = normal(location = 0, scale = 2.5, autoscale = TRUE),
    prior_intercept = normal(0, 2.5, autoscale = TRUE),
    prior_aux = exponential(rate = 1, autoscale = TRUE),
    seed = 1234
  )

saveRDS(
  model_rstanarm_2,
  file = "model_rstanarm_2.rds"
)
```


```{r}
#| echo: false
#| eval: true
#| label: tbl-poop
#| tbl-cap: "priors"
#| warning: false

modelsummary(
  list(
    "Non-scaled priors" = model_rstanarm_1,
    "Auto-scaling priors" = model_rstanarm_2
  ),
  fmt = 2
)
```


```{r}
prior_summary(model_rstanarm_2)
```









# Discussion

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this. 

## Second discussion point

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {-}


# Additional data details

# Model details {#sec-model-details}

## Posterior predictive check

In @fig-ppcheckandposteriorvsprior-1 we implement a posterior predictive check. This shows...

In @fig-ppcheckandposteriorvsprior-2 we compare the posterior with the prior. This shows... 

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]

pp_check(model_rstanarm_2) +
  theme_classic() +
  theme(legend.position = "bottom")

posterior_vs_prior(model_rstanarm_2) +
  theme_minimal() +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom") +
  coord_flip()
```


## Diagnostics

@fig-stanareyouokay-1 is a trace plot. It shows... This suggests...

@fig-stanareyouokay-2 is a Rhat plot. It shows... This suggests...


```

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2
plot(model_rstanarm_2, "trace")

plot(model_rstanarm_2, "rhat")
```

\newpage


# References


